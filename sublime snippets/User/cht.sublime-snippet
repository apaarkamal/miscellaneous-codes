<snippet>
	<content><![CDATA[
//min cht
struct cht {
	struct Line {
		int a;
		int b;
		int val;
		long double xLeft;
		bool type;
		Line(int _a = 0 , int _b = 0) {
			a = _a;
			b = _b;
			xLeft = -1e18;
			type = 0;
			val = 0;
		}
		int valueAt(int x) const {
			return 1LL * a * x + b;
		}
		friend bool areParallel(const Line &l1, const Line &l2) {
			return l1.a == l2.a;
		}
		friend long double intersectX(const Line &l1 , const Line &l2) {
			return areParallel(l1 , l2) ? 1e18 : 1.0 * (l2.b - l1.b) / (l1.a - l2.a);
		}
		bool operator < (const Line &l2) const {
			if (!l2.type)
				return a < l2.a;
			return xLeft > l2.val;
		}
	};
	set < Line >  hull;
	bool hasPrev(set < Line > :: iterator it) {
		return it != hull.begin();
	}
	bool hasNext(set < Line > :: iterator it) {
		return it != hull.end() && next(it) != hull.end();
	}
	bool irrelevant(const Line &l1 , const Line &l2 , const Line &l3) {
		return intersectX(l1, l3) <= intersectX(l1, l2);
	}
	bool irrelevant(set < Line > :: iterator it) {
		return hasPrev(it) && hasNext(it) && (irrelevant(*next(it) , *it , *prev(it)));
	}
	set < Line > :: iterator updateLeftBorder(set < Line > :: iterator it) {
		if (!hasNext(it)) {
			return it;
		}
		long double val = intersectX(*it , *next(it));
		Line buf(*it);
		it = hull.erase(it);
		buf.xLeft = val;
		it = hull.insert(it, buf);
		return it;
	}
	void addLine(int a , int b) {
		Line l3 = Line(a, b);
		auto it = hull.lower_bound(l3);
		if (it != hull.end() && areParallel(*it , l3)) {
			if (it -> b > b) {
				it = hull.erase(it);
			}
			else {
				return;
			}
		}
		it = hull.insert(it, l3);
		if (irrelevant(it)) {
			hull.erase(it);
			return;
		}
		while (hasPrev(it) && irrelevant(prev(it))) {
			hull.erase(prev(it));
		}
		while (hasNext(it) && irrelevant(next(it))) {
			hull.erase(next(it));
		}
		it = updateLeftBorder(it);
		if (hasPrev(it)) {
			updateLeftBorder(prev(it));
		}
		if (hasNext(it)) {
			updateLeftBorder(next(it));
		}
	}
	int getBest(int x) {
		Line q;
		q.val = x;
		q.type = 1;
		auto bestLine = hull.lower_bound(q);
		if (bestLine == hull.end()) {
			return 1e18;
		}
		return bestLine -> valueAt(x);
	}
};
// What if minimum is required instead of maximum?
// Again, you can modify the logic... or 
// you can observe that negating both slope and 
// Y-intersect has the effect of mirroring about the X-axis. 
// You can use the same implementation.
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cht</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
